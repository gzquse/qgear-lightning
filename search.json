[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "qgear-lightning",
    "section": "",
    "text": "pip install qgear-lightning",
    "crumbs": [
      "qgear-lightning"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "qgear-lightning",
    "section": "",
    "text": "pip install qgear-lightning",
    "crumbs": [
      "qgear-lightning"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "qgear-lightning",
    "section": "How to use",
    "text": "How to use\n\n!pip install qgear-lightning\n\n/bin/bash: /pscratch/sd/g/gzquse/cudaq/lib/libtinfo.so.6: no version information available (required by /lib64/libreadline.so.7)\nCollecting qgear-lightning\n  Downloading qgear_lightning-0.0.1-py3-none-any.whl.metadata (2.5 kB)\nRequirement already satisfied: cudaq in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qgear-lightning) (0.10.0)\nRequirement already satisfied: h5py in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qgear-lightning) (3.13.0)\nRequirement already satisfied: numpy in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qgear-lightning) (2.2.6)\nRequirement already satisfied: pillow in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qgear-lightning) (11.2.1)\nRequirement already satisfied: qiskit in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qgear-lightning) (2.1.2)\nRequirement already satisfied: cuda-quantum-cu12==0.10.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cudaq-&gt;qgear-lightning) (0.10.0)\nRequirement already satisfied: astpretty~=3.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (3.0.0)\nRequirement already satisfied: cuquantum-python-cu12&gt;=25.03 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (25.3.0)\nRequirement already satisfied: scipy&gt;=1.10.1 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (1.15.2)\nRequirement already satisfied: requests&gt;=2.31 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (2.32.3)\nRequirement already satisfied: nvidia-cublas-cu12~=12.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (12.6.4.1)\nRequirement already satisfied: nvidia-curand-cu12~=10.3 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (10.3.7.77)\nRequirement already satisfied: nvidia-cuda-runtime-cu12~=12.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (12.6.77)\nRequirement already satisfied: nvidia-cusolver-cu12~=11.4 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (11.7.1.2)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12~=12.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (12.6.77)\nRequirement already satisfied: rustworkx&gt;=0.15.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qiskit-&gt;qgear-lightning) (0.16.0)\nRequirement already satisfied: dill&gt;=0.3 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qiskit-&gt;qgear-lightning) (0.4.0)\nRequirement already satisfied: stevedore&gt;=3.0.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qiskit-&gt;qgear-lightning) (5.4.1)\nRequirement already satisfied: typing-extensions in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from qiskit-&gt;qgear-lightning) (4.14.1)\nRequirement already satisfied: pbr&gt;=2.0.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from stevedore&gt;=3.0.0-&gt;qiskit-&gt;qgear-lightning) (6.1.1)\nRequirement already satisfied: custatevec-cu12~=1.8 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (1.8.0)\nRequirement already satisfied: cutensornet-cu12~=2.7 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (2.7.0)\nRequirement already satisfied: cudensitymat-cu12~=0.1 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (0.1.0)\nRequirement already satisfied: cupy-cuda12x&gt;=13.0 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (13.4.1)\nRequirement already satisfied: nvidia-nvjitlink-cu12 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from nvidia-cusolver-cu12~=11.4-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (12.6.85)\nRequirement already satisfied: nvidia-cusparse-cu12 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from nvidia-cusolver-cu12~=11.4-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (12.5.4.2)\nRequirement already satisfied: setuptools in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from pbr&gt;=2.0.0-&gt;stevedore&gt;=3.0.0-&gt;qiskit-&gt;qgear-lightning) (75.8.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from requests&gt;=2.31-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (3.4.1)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from requests&gt;=2.31-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from requests&gt;=2.31-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (2.4.0)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from requests&gt;=2.31-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (2024.7.4)\nRequirement already satisfied: cutensor-cu12&lt;3,&gt;=2.2 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cudensitymat-cu12~=0.1-&gt;cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (2.2.0)\nRequirement already satisfied: fastrlock&gt;=0.5 in /pscratch/sd/g/gzquse/cudaq/lib/python3.11/site-packages (from cupy-cuda12x&gt;=13.0-&gt;cuquantum-python-cu12&gt;=25.03-&gt;cuda-quantum-cu12==0.10.0-&gt;cudaq-&gt;qgear-lightning) (0.8.3)\nDownloading qgear_lightning-0.0.1-py3-none-any.whl (11 kB)\nInstalling collected packages: qgear-lightning\nSuccessfully installed qgear-lightning-0.0.1\n\n\n\nimport os\nimport numpy as np\nfrom qiskit import QuantumCircuit\nfrom qgear_lightning.core import qiskit_to_gateList, counts_cudaq_to_qiskit, circ_kernel\nfrom qgear_lightning.io import write4_data_hdf5, read4_data_hdf5\nimport cudaq\n# ----------------------------\n# 1. Create a simple Qiskit circuit\nn_qubits = 4\nqc = QuantumCircuit(n_qubits)\nqc.h(0)\nqc.cx(0, 1)\nqc.ry(np.pi/4, 2)\nqc.u(np.pi/2, np.pi/4, np.pi/8, 3)\nqc.measure_all()\n\nqcEL = [qc]  # List of circuits\nnumShots = 10000\nverb = 0\nbackend = \"qpp-cpu\"  \n\n# ---------------------------\nout_path = \"out\"\nos.makedirs(out_path, exist_ok=True)\ncirc_name = \"toy_example\"\n\n# Convert to gate list\noutD, md = qiskit_to_gateList(qcEL)\ninpF = os.path.join(out_path, circ_name + \".gate_list.h5\")\nmd[\"short_name\"] = circ_name\nwrite4_data_hdf5(outD, inpF, md)\nnum_qubits=0\n# Load back\ngateD, MD = read4_data_hdf5(inpF, verb)\n\ncudaq.set_target(backend)\nnc = len(gateD['circ_type'])\nresL = [0] * nc\nstateL = [0] * nc\nfor i in range(nc):\n    num_qubit, num_gate = map(int, gateD['circ_type'][i])\n    gate_type = list(map(int, gateD['gate_type'][i].flatten()))\n    gate_param = list(map(float, gateD['gate_param'][i].flatten()))\n    assert num_gate &lt;= len(gate_param)\n    prOn = num_qubit &lt; 6 and i == 0 or verb &gt; 1\n    num_qubits = num_qubit\n    print(cudaq.draw(circ_kernel, num_qubit, num_gate, gate_type, gate_param))\n\nsh: /pscratch/sd/g/gzquse/cudaq/lib/libtinfo.so.6: no version information available (required by /lib64/libreadline.so.7)\nsh: /pscratch/sd/g/gzquse/cudaq/lib/libtinfo.so.6: no version information available (required by /lib64/libreadline.so.7)\n\n\n\ncirc_kernel",
    "crumbs": [
      "qgear-lightning"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nqiskit_to_gateList\n\n qiskit_to_gateList (qcL)\n\n\n\n\nveq&lt;?&gt;) -&gt; ()\nreturn\n} }\n\n veq&lt;?&gt;) -&gt; ()     return   } }  (*args)\n\n*The PyKernelDecorator serves as a standard Python decorator that takes the decorated function as input and optionally lowers its AST representation to executable code via MLIR. This decorator enables full JIT compilation mode, where the function is lowered to an MLIR representation.\nThis decorator exposes a call overload that executes the code via the MLIR ExecutionEngine for the MLIR mode.*\n\n\n\nveq&lt;?&gt;) -&gt; ()\nreturn\n} }\n\n veq&lt;?&gt;) -&gt; ()     return   } }  (*args)\n\n*The PyKernelDecorator serves as a standard Python decorator that takes the decorated function as input and optionally lowers its AST representation to executable code via MLIR. This decorator enables full JIT compilation mode, where the function is lowered to an MLIR representation.\nThis decorator exposes a call overload that executes the code via the MLIR ExecutionEngine for the MLIR mode.*\n\n\n\ncontinue %4 : i64\n} {invariant}\nreturn\n} }\n\n continue %4 : i64     } {invariant}     return   } }  (*args)\n\n*The PyKernelDecorator serves as a standard Python decorator that takes the decorated function as input and optionally lowers its AST representation to executable code via MLIR. This decorator enables full JIT compilation mode, where the function is lowered to an MLIR representation.\nThis decorator exposes a call overload that executes the code via the MLIR ExecutionEngine for the MLIR mode.*\n\n\n\ncontinue %6 : i64\n} {invariant}\nreturn\n} }\n\n continue %6 : i64     } {invariant}     return   } }  (*args)\n\n*The PyKernelDecorator serves as a standard Python decorator that takes the decorated function as input and optionally lowers its AST representation to executable code via MLIR. This decorator enables full JIT compilation mode, where the function is lowered to an MLIR representation.\nThis decorator exposes a call overload that executes the code via the MLIR ExecutionEngine for the MLIR mode.*\n\nsource\n\n\ncudaq_run\n\n cudaq_run (qKerL, shots:int)\n\nRun multiple CUDA-Q kernels sequentially.\n\nsource\n\n\ncudaq_run_parallel_qpu\n\n cudaq_run_parallel_qpu (qKerL, shots:int, qpu_count:int)\n\nRun multiple CUDA-Q kernels in parallel across available QPUs.\n\nsource\n\n\ncounts_cudaq_to_qiskit\n\n counts_cudaq_to_qiskit (resL:list)\n\nConvert a list of CUDA-Q results into Qiskit-style counts dictionaries.\n\nsource\n\n\nstring_to_dict\n\n string_to_dict (raw_string:str)\n\nConvert a raw CUDA-Q result string to a dictionary with reversed keys.\n\nsource\n\n\nprocess_dict\n\n process_dict (d:dict)\n\nReverse all keys in the dictionary and map them to corresponding values.\n\nsource\n\n\nreverse_key\n\n reverse_key (key:str)\n\nReverse a string key (used for bitstring manipulation)",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "io.html",
    "href": "io.html",
    "title": "IO",
    "section": "",
    "text": "source\n\nread4_data_hdf5\n\n read4_data_hdf5 (inpF, verb=1)\n\n*Read data and metadata from an HDF5 file.\nArgs: inpF (str): Input HDF5 filename. verb (int): Verbosity level.\nReturns: tuple: (data dictionary, metadata dictionary or None)*\n\nsource\n\n\nwrite4_data_hdf5\n\n write4_data_hdf5 (dataD, outF, metaD=None, verb=1)\n\n*Write a dictionary of Python objects and NumPy arrays to an HDF5 file.\nArgs: dataD (dict): Dictionary of data to store. outF (str): Output HDF5 filename. metaD (dict, optional): Metadata dictionary to store as JSON. verb (int): Verbosity level.*",
    "crumbs": [
      "IO"
    ]
  }
]